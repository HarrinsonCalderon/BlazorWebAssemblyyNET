@page "/Product";
@inject IProductService productService;
@inject NavigationManager NavigationManager
@inject IProductService ProductService
 
@inject IJSRuntime JSRuntime
@inject IToastService toastService
@using BlazorApp1.Models;
<ModuleTitle Title="Products"></ModuleTitle>

<style>
    .products-container{
        display:grid;
        grid-template-columns:repeat(auto-fill,280px);
        grid-auto-rows:auto;
        grid-gap:1rem;
    }
</style>
<button class="btn btn-dark" @onclick="@(()=>NavigationManager.NavigateTo("/addproduct"))">Add product</button>
<hr />

@if (products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                     <p>@product.Price.ToString("C")</p> 
                     <button title="Eliminar" class="btn btn-danger btn-delete" @onclick="@(()=>DeleteProduct(product))"><span class="oi oi-trash"></span></button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No hay productos para mostrar</p>
}

@code {
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        products= await productService.Get();
    }

    private async Task DeleteProduct(Product  product)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm",$"Quieres eliminar el producto {product.Title}"))
        {
            return;
        }
        else
        {
            await ProductService.Delete(product.Id);
        }
        toastService.ShowSuccess("Producto Eliminado",null);
        await GetProducts();
    }
  
 

}
